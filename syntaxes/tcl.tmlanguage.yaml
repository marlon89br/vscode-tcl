fileTypes:
  - tcl
  - tm
  - tk
firstLineMatch: ^#!/.*\b(tclsh|wish)\b([8-9]|[8-9]\.\d+)?
foldingEndMarker: ([})\]])
foldingStartMarker: ([{(\[])
information_for_contributors:
  - This file has been converted from https://github.com/bitwisecook/vscode-tcl/blob/master/
  - If you want to provide a fix or improvement, please create a pull request against
    the original repository.
  - Once accepted there, we are happy to receive an update request.
name: Tcl
patterns:
  - include: "#root"
repository:
  annotate:
    patterns:
      - include: "#annotate-control-block"
      - include: "#annotate-properties"
      - include: "#annotate-title"
      - include: "#annotate-header"
      - include: "#annotate-highlight"
      - include: "#annotate-type"
      - include: "#annotate-list"
  annotate-control-block:
    patterns:
      - begin: ^\s*+(?={)
        comment: bracketed within a comment
        contentName: keyword.operator
        end: (?<=})
        patterns:
          - include: "#brackets"
  annotate-header:
    patterns:
      - begin: \s*+(>)
        captures:
          "1":
            name: entity.function.name.annotate.tcl
          "2":
            name: meta.constant.annotate.header.tcl
        comment: adding > in a multi-line will make the line emphasized
        contentName: meta.constant.annotate.header.tcl
        end: (<)|(?=$|>)
        patterns:
          - include: "#annotate"
  annotate-highlight:
    patterns:
      - captures:
          "1":
            name: string.quote.annotate.comment.tcl
            patterns:
              - include: "#annotate-type"
              - include: "#annotate-proc-call"
              - include: "#variable-non-substituting"
              - match: \b(http://([^\s]*))
                name: entity.function.name.markup.underline
        comment: adding | in a multi-line will make the line highlighted (string)
        match: (?<=\|)\s*([^|]*)
  annotate-list:
    patterns:
      - match: ^\s*([0-9]\.)\s+
        name: meta.class
  annotate-proc-call:
    patterns:
      - begin: (\[)
        beginCaptures:
          "1":
            name: support.type.annotate.proc-call.tcl
        end: (\])
        endCaptures:
          "1":
            name: support.type.annotate.proc-call.tcl
        patterns:
          - include: "#proc-call"
  annotate-properties:
    begin: '(?=\s*@[^\s

      ])'
    end: "(?=$|[

      }@])"
    patterns:
      - captures:
          "1":
            name: meta.constant.annotate.property.tcl
          "2":
            name: support.type.name.tcl
          "3":
            name: entity.function.property.name.tcl
        comment: special @ values that are meant as property values
        match: \s*+(@)\b(type)\b(\s+[^{}|@\[<>-]*)?
      - captures:
          "1":
            name: support.type.annotate.property.tcl
          "2":
            name: variable.property.name.tcl
          "3":
            name: support.type
            patterns:
              - include: "#opt"
        comment: special @ values that are meant as property values
        match: \s*+(@)\b(arg(?:s)?|returns|key|prop|if|example|param|params|opt|option|argument|val|value)\b(\s+[^\/{}|@\[<>]*)?
      - captures:
          "1":
            name: meta.constant.annotate.property.tcl
          "2":
            name: entity.function.property.name.tcl
          "3":
            name: support.type.tcl
        comment: "@<other> (no space after @)"
        match: \s*+(@)\b([^\s]*)\b(\s+[^\/{}|@\[<>-]*)?
      - include: "#annotate"
  annotate-regular-expression:
    patterns:
      - begin: (/)
        beginCaptures:
          "1":
            name: support.type.annotate.re.brace.open.tcl
        contentName: string.re.expression.comment.annotate.contents.tcl
        end: (/|$)
        endCaptures:
          "1":
            name: support.type.annotate.re.brace.close.tcl
        patterns:
          - include: "#regular-expression"
  annotate-title:
    patterns:
      - begin: \s*+(@)
        beginCaptures:
          "1":
            name: support.type.annotate.tcl
        comment: adding @ in a multi-line will make the line emphasized
        contentName: meta.class.comment.annotate.tcl
        end: '(?={|\s-|>)|(@|}|$|

          )|\|'
        endCaptures:
          "1":
            name: support.type.annotate.tcl
        patterns:
          - include: "#variable-non-substituting"
          - include: "#namespace-separator"
  annotate-type:
    patterns:
      - begin: \s*+({)
        beginCaptures:
          "1":
            name: meta.constant.comment.annotate.tcl
        comment: adding @ in a multi-line will make the line emphasized
        contentName: entity.function.name.comment.annotate.tcl
        end: \s*(})
        endCaptures:
          "1":
            name: meta.constant.comment.annotate.tcl
        patterns:
          - include: "#annotate-regular-expression"
          - include: "#annotate-proc-call"
          - begin: (<)
            contentName: support.type.comment.annotate.property.punctuation.italic.tcl
            end: (>)|(?=[}])
            patterns:
              - include: "#annotate-regular-expression"
              - match: (\|)
                name: entity.function.name.tcl
              - include: "#variable-non-substituting"
              - match: ([,])
                name: entity.function.name.annotate.opt.tcl
              - match: ([-])
                name: meta.constant.annotate.opt.tcl
          - match: (?:(?<={|\|)([?*])|([?*])(?=}|\|))
            name: variable.modifier.annotate.punctuation.italic.tcl
          - match: (\|)
            name: meta.constant.comment.annotate.tcl
  arguments-braced:
    patterns:
      - begin: '({)(?:(?!$|

          |\]|}|;|\[|{)\s*)?'
        end: (})
        patterns:
          - match: '(?:(?!$|

              |\]|}|;|\[|{)\s*)?([^\s|{|}]*)(?:(?!$|

              |\]|}|;|\[|{)\s*)?'
            name: variable
  bare-string:
    patterns:
      - include: "#opt"
      - include: "#string-escapes"
      - match: '\s*(\$)(?=$|

          |\]|}|"|;|\s)'
        name: bare.string.tcl
      - match: (\\[^\]"\\nrtbfv0`\[])
        name: bare.string.tcl
      - captures:
          "1":
            name: bare.string.tcl
            patterns:
              - captures:
                  "1":
                    patterns:
                      - include: "#namespace-name"
                match: (?:(?<=::)|(?=[^\s:]*(?=::)))(?!\s)([^\s]*)
              - include: "#variable"
        match: '(?<!::)(?!;|\]|}|\*|"|;)([^\*}\\;\]{\["\$

          \-\)\(]+)'
      - match: (-)(?=\s|;|}|\]|"|-)
        name: bare.string.tcl
      - match: (?<=-)(-)
        name: bare.string.tcl
      - include: "#variable"
  brackets:
    patterns:
      - include: "#invariant"
      - include: "#special-brackets"
      - include: "#empty-brackets"
      - include: "#square-brackets"
      - include: "#curly-brackets"
  classname:
    patterns:
      - include: "#line-escape"
      - match: (?<=\s)\s*([^\s;\\\[]*)
        name: meta.class
      - include: "#square-brackets"
  comment-blocks:
    patterns:
      - begin: (?<=^|;|{)\s*((#))
        captures:
          "1":
            name: comment.line.number-sign.tcl
          "2":
            name: punctuation.definition.comment.tcl
        contentName: comment.line.number-sign.tcl
        end: '(?=$|

          )|((#))(?=\s*(?:[}

          ]))'
      - begin: (?<=^|;|\{)\s*((?:\%\s+\{)|(?:\bif\s+{?0}?\s+{))
        beginCaptures:
          "1":
            name: comment.block.multi.start.tcl
          "2":
            name: punctuation.definition.comment.tcl
        contentName: comment.block.tcl
        end: \s*(\})
        endCaptures:
          "1":
            name: comment.block.multi.end.tcl
        patterns:
          - include: "#annotate"
          - include: "#variable-non-substituting"
  constant-numeric:
    patterns:
      - captures:
          "1":
            name: meta.constant.numeric
          "2":
            name: punctuation.italic
          "3":
            name: support.type
        match: \s*+((?:#?|\.)?(?:\B[-+])?(?:\b0[bB][0-1]*|\b0[oO][0-7]*|\b(0([xX]))[0-9a-fA-F]*|(\B\.[0-9]+|\b[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?))
      - match: \s*+\b(true|false|bool|entier|integer|float|null)\b
        name: meta.constant.punctuation.italic
  curly-brackets:
    patterns:
      - begin: \s*+({)
        beginCaptures:
          "1":
            name: meta.brace.curly.open.tcl
        end: (})
        endCaptures:
          "1":
            name: meta.brace.curly.close.tcl
        name: meta.curly.enclosed
        patterns:
          - include: "#invariant"
          - include: "#special-brackets"
          - include: "#curly-brackets"
          - include: "#proc-call"
  curly-string-brackets:
    patterns:
      - include: "#empty-brackets"
      - begin: \s*+({)
        beginCaptures:
          "1":
            name: meta.brace.curly.open.tcl
        contentName: string.quote.bracketed.nosubstitution.tcl
        end: (})
        endCaptures:
          "1":
            name: meta.brace.curly.close.tcl
          "2":
            name: invalid.illegal.charafterbrace.tcl
        name: meta.curly.enclosed
        patterns:
          - match: ([\[\]])
            name: string
          - include: "#variable-non-substituting"
          - include: "#curly-string-brackets"
          - include: "#quoted-string"
          - include: "#bare-string"
  double-dash:
    captures:
      "1":
        name: keyword.control.tcl
    match: \s(--)\s
  empty-brackets:
    patterns:
      - captures:
          "1":
            name: punctuation.definition.string.brackets.tcl
        match: \s*+(?={)({})
      - captures:
          "1":
            name: punctuation.definition.string.brackets.tcl
        comment: enclosed brackets
        match: \s*+{([{}]*)}
  expression-brackets:
    patterns:
      - begin: (\{)
        beginCaptures:
          "1":
            name: meta.expression.start.tcl
        comment: Expressions utilize special syntax highlighting
        end: (\})
        endCaptures:
          "1":
            name: meta.expression.end.tcl
        patterns:
          - include: "#empty-brackets"
          - include: "#curly-string-brackets"
          - include: "#square-brackets"
          - include: "#expressions"
  expression-functions:
    patterns:
      - begin: \b(abs|acos|asin|atan|atan2|bool|ceil|cos|cosh|double|entier|exp|floor|fmod|hypot|int|isqrt|log|log10|max|min|pow|rand|round|sin|sinh|sqrt|srand|tan|tanh|wide)\b(\()
        beginCaptures:
          "1":
            name: entity.function.name.math.function.punctuatio.italic.tcl
          "2":
            name: entity.function.name.math.function.brace.open.tcl
        end: (\))
        endCaptures:
          "1":
            name: entity.function.name.math.function.brace.close.tcl
        patterns:
          - include: "#expressions"
  expression-operators:
    patterns:
      - comment: expression word operators
        match: \b(in|ni|eq|ne)\b
        name: support.type.operator.punctuation.italic.tcl
      - comment: expression operators
        match: (=|\+|-|\*|/|%)
        name: support.type.operator.tcl
      - comment: expression comparisons
        match: ([<>])
        name: support.type.expression.operator.tcl
      - comment: expression bitwise
        match: ([|^&!~])
        name: support.type.expression.operator.tcl
      - comment: expression ternary
        match: ([?:])
        name: support.type.expression.operator.tcl
  expressions:
    patterns:
      - include: "#variable"
      - include: "#curly-string-brackets"
      - include: "#square-brackets"
      - include: "#expression-functions"
      - include: "#constant-numeric"
      - include: "#expression-operators"
      - begin: (\()
        beginCaptures:
          "1":
            name: entity.function.name.expression.brace.ooo.open.tcl
        comment: order-of-operations
        end: \s*(\))
        endCaptures:
          "1":
            name: entity.function.name.expression.brace.ooo.close.tcl
        patterns:
          - include: "#expressions"
      - include: "#quoted-string"
  format-brackets:
    patterns:
      - begin: \s*({)
        contentName: string.format.contents.tcl
        end: (})
        patterns:
          - include: "#variable-non-substituting"
          - include: "#format-brackets"
          - include: "#empty-brackets"
          - captures:
              "1":
                name: meta.constant
              "2":
                name: support.type
            match: ([#0-9+-])([duioxXcsfegG]?)
          - captures:
              "1":
                name: support.type.tcl
              "2":
                name: entity.function.name.tcl
            match: \s*+(%)([.duioxXcsfegG])
          - match: ([;])
            name: string
          - include: "#constant-numeric"
  glob-match:
    patterns:
      - begin: ({)
        end: (})
        patterns:
          - include: "#glob-match"
      - match: \s*+(\*)
        name: meta.class
      - include: "#string-escapes"
      - begin: (?<!\\)(")
        beginCaptures:
          "1":
            name: string.double.quoted.glob.match.open.tcl
        end: (?<!\\)(")
        endCaptures:
          "1":
            name: string.double.quoted.glob.match.close.tcl
        patterns:
          - include: "#glob-match"
      - begin: (?<!\\)(\[)
        beginCaptures:
          "1":
            name: meta.class
        contentName: support.type
        end: (?<!\\)(\])
        endCaptures:
          "1":
            name: meta.class
      - include: "#square-brackets"
      - include: "#bare-string"
  html-curly-brackets:
    begin: \s*({)
    end: (})
    patterns:
      - include: text.html.basic
  if-block:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=\})\s+(\{)
        beginCaptures:
          "1":
            name: keyword.control
        end: (\})
        patterns:
          - include: $self
  if-else:
    patterns:
      - begin: (?<=\})\s+(else)\s+(?=\{)
        beginCaptures:
          "1":
            name: keyword.control.else.tcl
        end: (?<=\}|$)
        patterns:
          - include: "#brackets"
  if-else-if:
    patterns:
      - begin: (?<=\})\s+(elseif)\s+
        beginCaptures:
          "1":
            name: keyword.control.elseif.tcl
        end: \s*
        patterns:
          - include: "#expression-brackets"
          - include: "#brackets"
  if-handlers:
    patterns:
      - include: "#expression-brackets"
      - include: "#if-else-if"
      - include: "#if-else"
      - include: "#curly-brackets"
  ignore-long-lines:
    comment: long lines are not parsed for performance
    patterns:
      - match: ^.{1000,}
  invariant:
    patterns:
      - include: "#ignore-long-lines"
      - include: "#no-starting-empty-brackets"
      - include: "#no-empty-square-brackets"
  keywords:
    patterns:
      - include: "#square-brackets"
      - include: "#tcl-subst"
      - include: "#variable"
      - include: "#tcl-proc"
      - include: "#tcl-binary"
      - include: "#tcl-string"
      - include: "#tcl-throw"
      - include: "#tcl-switch"
      - include: "#tcl-info"
      - include: "#tcl-incr"
      - include: "#tcl-interp"
      - include: "#tcl-oo"
      - include: "#tcl-try-catch"
      - include: "#tcl-setters"
      - include: "#tcl-expression-keywords"
      - include: "#tcl-dict"
      - include: "#tcl-foreach"
      - include: "#tcl-namespace"
      - include: "#tcl-oo-keywords"
      - include: "#regexp"
      - include: "#tcl-lassign"
      - include: "#tcl-array"
      - include: "#tcl-catch"
      - include: "#tcl-ns-commands"
      - include: "#tcl-puts"
      - include: "#tcl-upvar"
      - include: "#tcl-global"
      - include: "#tcl-vwait"
      - include: "#tcl-entity-commands"
      - captures:
          "1":
            patterns:
              - include: "#keywords"
          "2":
            name: keyword.control.special.tcl
        match: (?<=^|[\[;{])\s*+([^\s]*)\s+\b(destroy|new)\b
      - include: "#tcl-core-commands"
      - captures:
          "1":
            patterns:
              - include: "#namespace-name"
        match:
          '(?:(?<=^|[\[{;])\s*|(?<=::)(?![\s"]))([^\s}\]{\[;\\"]*)(?=$|{}|[\s

          \]}\[;])'
  line-escape:
    begin: '\s*+(\\

      )$'
    beginCaptures:
      "1":
        name: constant.character.escape.newline.tcl
    end: (^)(?:\s*(?!$))?
    endCaptures:
      "1":
        name: meta.lineescape.highlight.tcl
  namespace-name:
    patterns:
      - include: "#line-escape"
      - include: "#variable"
      - include: "#namespace-separator"
      - match: '(?![\s{}\[\]])([^\s:$\[\]}{;

          ]+)'
        name: entity.function.name.tcl
  namespace-separator:
    patterns:
      - match: (?<!:)(:)(?!:)|(?<=::)(:)(?!:)
        name: string
      - match: (::)
        name: support.type
  no-empty-square-brackets:
    patterns:
      - captures:
          "1":
            name: string.empty.square.brace
        match: (\[\])
  no-starting-empty-brackets:
    patterns:
      - captures:
          "1":
            name: invalid.illegal.termination.tcl
        match: (?<=^)\s*+(\{\}|\[\])
  opt:
    patterns:
      - captures:
          "1":
            name: support.type.opt.tcl
          "2":
            name: meta.constant.opt.start.tcl
        comment:
          Handle options sent to commands at various points (cmd -name1 value
          -name2 value)
        match: '\s*+(?<=\s|^|"|\()((-)(?!-|\s|"|;|

          |>)[^\s$

          \[\];"{)(}]*)'
  proc-args-braced:
    begin: (?={)({)
    beginCaptures:
      "1":
        name: meta.brace.curly.proc.args.open.tcl
    end: \s*(})
    endCaptures:
      "1":
        name: meta.brace.curly.proc.args.close.tcl
    patterns:
      - include: "#proc-arguments-nested"
      - include: "#variable-bare"
  proc-args-singular:
    patterns:
      - captures:
          "1":
            name: punctuation.definition.variable.tcl
        match: (?!{|\[|\s|}|\]|$)([^\s}\];]*)(?=\s|}|\])
  proc-arguments:
    patterns:
      - include: "#proc-args-braced"
      - include: "#proc-args-singular"
  proc-arguments-nested:
    patterns:
      - begin: \s*+({)
        beginCaptures:
          "1":
            name: entity.function.name
        end: (})
        endCaptures:
          "1":
            name: entity.function.name
        patterns:
          - include: "#quoted-string"
          - include: "#empty-brackets"
          - captures:
              "1":
                name: variable
              "2":
                name: string.proc.argument
                patterns:
                  - include: "#constant-numeric"
            contentName: variable
            match: \s*([^\s|{|}]*)\s*([^\s|{|}]*)(?=\s*?})
          - include: "#curly-string-brackets"
          - match: \s*([^\s|{|}]*)
            name: variable.proc.argument
  proc-call:
    comment: handles a proc call
    patterns:
      - include: "#invariant"
      - include: "#comment-blocks"
      - include: "#variable-object"
      - include: "#variable"
      - include: "#quoted-string"
      - include: "#keywords"
      - include: "#proc-call-args"
  proc-call-args:
    comment: Arguments given to a proc that is being called
    patterns:
      - include: "#special-brackets"
      - include: "#brackets"
      - include: "#line-escape"
      - include: "#opt"
      - include: "#quoted-string"
      - include: "#variable"
      - include: "#constant-numeric"
      - include: "#bare-string"
      - begin: (?=::)
        end: '\s|(?=[\]};

          ])'
        patterns:
          - include: "#namespace-name"
  property-list:
    begin: (?=.)
    end: \s|(?=(?<!\\)$|[\]])|(?<=})
    patterns:
      - include: "#empty-brackets"
      - include: "#square-brackets"
      - include: "#tcl-expression-keywords"
      - begin: ([^\s\]]*)\s+({)
        beginCaptures:
          "1":
            name: variable
            patterns:
              - include: "#variable"
              - include: "#opt"
        end: (})
        patterns:
          - include: "#empty-brackets"
          - include: "#property-list"
      - begin: '\s*(?!$|\]|\\)([^\s\]}{]*)\s+(?!$|[{

          ])'
        beginCaptures:
          "1":
            name: variable
            patterns:
              - include: "#constant-numeric"
              - include: "#opt"
              - include: "#variable"
        end: (?=\s|\]|(?<!\\)$)|(?<=})
        patterns:
          - include: "#line-escape"
          - include: "#opt"
          - include: "#empty-brackets"
          - include: "#special-brackets"
          - include: "#square-brackets"
          - include: "#variable"
          - include: "#constant-numeric"
          - match: (?!\s|\])([^\s\]]+)
            name: string
      - include: "#variable"
      - include: "#bare-string"
  property-list-brackets:
    patterns:
      - begin: \s*({)
        end: (})
        patterns:
          - include: "#property-list"
  quoted-string:
    patterns:
      - comment: when inside curly bracket, {"}
        match: (?<={)\s*+("\s*(?=})(?!"))
        name: string.quoted.tcl
      - begin: \s*+(?<!\\)(")
        beginCaptures:
          "1":
            name: string.quoted.double.open.tcl
        end: (?<!\\)((?:\\{2})*)(")
        endCaptures:
          "1":
            name: constant.character.escape
          "2":
            name: string.quoted.double.close.tcl
        patterns:
          - include: "#square-brackets"
          - include: "#string-content"
          - match: (\*)
            name: bare.string
          - match: ([{}])
            name: string.quoted.tcl
  regexp:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(regexp|regsub)\b
        beginCaptures:
          "1":
            name: support.type.ns.separator.tcl
          "2":
            name: keyword.control.regexp.tcl
        end: '(?=(?<!\\)(?:$|.*[

          ;}\]]))'
        patterns:
          - include: "#line-escape"
          - include: "#double-dash"
          - include: "#quoted-string"
          - match: \s*(->)
            name: meta.constant.re.trashvar.tcl
          - include: "#opt"
          - begin: \s*({|")
            contentName: string.tcl
            end: '(}|")(?=\s+(?:\\

              |$|

              |\[|\$|\b|"|;|}|-))'
            patterns:
              - include: "#regular-expression"
          - include: "#quoted-string"
          - include: "#variable"
          - include: "#variable-bare-italic"
      - begin: (?<=_regexp|_re)\s+(?={|")
        end: (?=(?<!\\)$)|(?<=")|(?<=})
        patterns:
          - begin: ({)
            contentName: string.tcl
            end: (})
            patterns:
              - include: "#regular-expression"
          - begin: (")
            contentName: string.tcl
            end: (")
            patterns:
              - include: "#regular-expression"
  regular-expression:
    patterns:
      - match: '(?<!\\)(\#.*)(?=

          |$)'
        name: comment
      - captures:
          "1":
            name: support.type.re.anychar.tcl
          "2":
            name: variable.re.modifier.tcl
        match: (\.)([?+*])
      - match: (?<={|^)\s*(\^)
        name: meta.class.re.start.tcl
      - match: '(?<!\\)(\$)(?=\s*}|

          )'
        name: meta.class.re.end.tcl
      - match: (\\)(?=\s*})
        name: invalid.illegal.re.tcl
      - match: (?<!\\)(\|)
        name: meta.constant.re.or.tcl
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
        comment: the character whose value is 0
        match: (?<!\\)(\\)0[^0-9a-fA-F]
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
          "3":
            name: entity.function.name.re.unicode.punctuation.italic.tcl
        comment:
          (where X is any character) the character whose low-order 5 bits are
          the same as those of X, and whose other bits are all zero
        match: (?<!\\)(\\)(c)(.)
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
          "3":
            name: entity.function.name.re.unicode.punctuation.italic.tcl
        comment: (up to four hexadecimal digits) the Unicode character U+wxyz
        match: (?<!\\)(\\)(u)([0-9a-fA-F]{1,4})
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
          "3":
            name: entity.function.name.re.unicode.punctuation.italic.tcl
        comment:
          reserved for a Unicode extension up to 21 bits. The digits are parsed
          until the first non-hexadecimal character is encountered, the maximun of eight
          hexadecimal digits are reached, or an overflow would occur in the maximum
          value of U+10ffff.
        match: (?<!\\)(\\)(U)([0-9a-fA-F]{1,8})
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
          "3":
            name: entity.function.name.re.unicode.punctuation.italic.tcl
        comment:
          (where hh is one or two hexadecimal digits) the character whose hexadecimal
          value is 0xhh
        match: (?<!\\)(\\)(x)([0-9a-fA-F]{1,2})
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
          "3":
            name: entity.function.name.re.unicode.punctuation.italic.tcl
        comment:
          the character whose octal value is 0xy?z?. The first digit must be
          in the range 0-3, otherwise the two-digit form is assumed.
        match: (?<!\\)(\\)([0-3][0-7]{2}|[0-7]{2})
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: meta.constant.numeric.tcl
        match: (?<!\\)(\\)([1-9][0-9]?[0-9]?)
      - captures:
          "1":
            name: support.type.re.escape.tcl
          "2":
            name: support.type.re.escaped.value.tcl
        match: (?<!\\)(\\)([abBefnrtv0dswDSWAmMyYZ])?
      - begin: (?<!\\)(\()(\?[!:=])
        beginCaptures:
          "1":
            name: meta.constant.re.lookahead.close.punctuation.italic.tcl
          "2":
            name: meta.class.re.lookahead.type.tcl
        end: (?<!\\)(\))
        endCaptures:
          "1":
            name: meta.constant.re.lookahead.close.punctuation.italic.tcl
        patterns:
          - include: "#regular-expression"
      - begin: (?<!\\)(\()(\?)(?![!:=\)])
        beginCaptures:
          "1":
            name: meta.constant.re.lookahead.open.punctuation.italic.tcl
          "2":
            name: keyword.control.re.meta.tcl
        contentName: entity.function.name.punctuation.italic.underline.re.meta.flags.tcl
        end: (?<!\\)(\))
        endCaptures:
          "1":
            name: meta.constant.re.lookahead.close.punctuation.italic.tcl
      - begin: (?<!\\)(\[)(\^)?
        beginCaptures:
          "1":
            name: meta.constant.re.lookahead.close.punctuation.italic.tcl
          "2":
            name: meta.variable.re.negate.chars.tcl
        contentName: meta.class
        end: (?<!\\)([\]])([*?+]([?+]?))?
        endCaptures:
          "1":
            name: meta.constant.re.lookahead.close.punctuation.italic.tcl
          "2":
            name: variable.re.modifier.tcl
          "3":
            name: support.type.re.nongreedy.punctuation.italic.tcl
        patterns:
          - captures:
              "1":
                name: support.type.re.escape.tcl
              "2":
                name: meta.class
            match: (?<!\\)(\\)(.)
          - begin: (?<!-)(\[[:=])
            beginCaptures:
              "1":
                name: entity.function.name.re.bracket.expression.open.punctuation.italic.tcl
            end: ([:=]\])(?!-)
            endCaptures:
              "1":
                name: entity.function.name.re.bracket.expression.close.punctuation.italic.tcl
            patterns:
              - match: ([^:=\]]*)(?=[:=]\])
                name: support.type.punctuation.italic.tcl
          - captures:
              "1":
                name: support.type.re.escape.tcl
              "2":
                name: support.type.re.escaped.value.tcl
            match: (\\)([abBefnrtv0dsw])
          - match: (?<!(?<!\\)\\)(-)
            name: entity.function.name
      - begin: (?<!\\)(\()
        beginCaptures:
          "1":
            name: keyword.control
        end: (?<!\\)(\))
        endCaptures:
          "1":
            name: keyword.control
        patterns:
          - include: "#regular-expression"
      - captures:
          "1":
            name: entity.function.name
          "2":
            name: meta.constant.re.number.tcl
          "3":
            name: support.type.re.expand.tcl
          "4":
            name: meta.constant.re.number.tcl
        match: (?<!\\)({([0-9]*)(\,)?([0-9]*)?})
      - match: (?:(?<!\\\.)(?<=\.))(?<=\.|\])((?<!\\)[*?+])
        name: meta.constant.re.tcl
      - match: (?<=\*|\+)((?<!\\)[*?+])
        name: support.type.re.tcl
      - match: (?<!\\)(\*)
        name: variable.re.modifier.tcl
      - match: ((?<!\\)[.?^!$+])
        name: variable.re.modifier.tcl
      - match: (?<=\.)((?<!\\)[*?])
        name: variable.re.modifier.tcl
  root:
    patterns:
      - include: "#invariant"
      - include: "#brackets"
      - include: "#proc-call"
  special-brackets:
    comment: Support for special cases that brackets may be used
    patterns:
      - comment: Need to handle the case that we have {*}$varname
        include: "#variable"
      - captures:
          "1":
            name: entity.function.name.tcl.markup.italic
          "2":
            name: support.type
        comment: Need to handle the case we spread a command {*}[list one two]
        match: \s*({(\*)}?)(?=\[|{|")
  spread-variable:
    patterns:
      - captures:
          "1":
            name: entity.function.name.tcl.markup.italic
          "2":
            name: support.type
        match: \s*+({(\*)}?)(?=\$)
  spread-variable-only:
    comment: Only allow a variable if it is spread using {*}
    patterns:
      - captures:
          "1":
            name: invalid.illegal.nospread.tcl
          "2":
            name: invalid.illegal.nospread.tcl
        match: (?<=^|\[)\s*(?<!\{\*\})(\$)(([a-zA-Z0-9_]|::)+(\([^\)]+\))?|\{[^\}]*\})
      - include: "#variable"
  square-brackets:
    patterns:
      - begin: \s*+(?<!\\)(\[)
        beginCaptures:
          "1":
            name: meta.brace.square.open.tcl
        end: (?<!\\)(\])
        endCaptures:
          "1":
            name: meta.brace.square.close.tcl
        patterns:
          - include: "#line-escape"
          - include: "#invariant"
          - include: "#proc-call"
  string-content:
    patterns:
      - include: "#string-escapes"
      - include: "#variable"
      - include: "#square-brackets"
      - include: "#bare-string"
  string-escapes:
    patterns:
      - match: '\\

          '
        name: constant.character.escape.newline.tcl
      - match: \s*+\\[\]"\\nrtbfv0`\[]
        name: constant.character.escape
      - match: \\u(({[0-9a-fA-F]+\})|[0-9a-fA-F]{4})
        name: constant.character.escape
      - match: \\x[0-9a-fA-F]{2}
        name: constant.character.escape
      - captures:
          "1":
            name: constant.character.escape
          "2":
            name: string
        match: (?<!\\)(\\)([;])
        name: constant.character.escape
  tcl-append:
    patterns:
      - begin: (?<=^|[\[{;]|tailcall)\s*(::)?\b(append|lappend)\b(?:(\s+[^\s]*))?
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.set.tcl
          "3":
            patterns:
              - include: "#variable-bare-italic"
              - include: "#variable"
        end: (?=$|^|;|}|\])
        patterns:
          - include: "#proc-call-args"
  tcl-array:
    patterns:
      - include: "#namespace-separator"
      - begin: (?<=^|[\[{;]|tailcall\s)\s*(?:::)?(array\b)
        beginCaptures:
          "1":
            name: keyword.control.array.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#tcl-array-set"
          - include: "#tcl-array-get"
          - include: "#tcl-array-commands"
  tcl-array-commands:
    patterns:
      - begin: (?<=array)(?:::)?\s+(names|donesearch|anymore|exists|nextelement|size|startsearch|statistics|unset)\b
        beginCaptures:
          "1":
            name: entity.function.name.array.command.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#proc-call-args"
  tcl-array-get:
    patterns:
      - begin: (?<=array)(?:::)?\s+(get)\b
        beginCaptures:
          "1":
            name: entity.function.name.array.get.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - begin: '(?<=get)(\s+(?!$|[

              ;\]])[^\s\]};

              ]*)'
            captures:
              "1":
                patterns:
                  - include: "#variable-bare"
            end: '(?=(?<!\\)(?:$|[

              ;\]}]))'
            patterns:
              - include: "#proc-call-args"
  tcl-array-set:
    patterns:
      - begin: (?<=array)(?:::)?\s+(set)\b
        beginCaptures:
          "1":
            name: entity.function.name.array.set.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - begin: '(?<=set)\s+(?!$|[

              ;}\]])([^\s\];]*)'
            beginCaptures:
              "1":
                patterns:
                  - include: "#variable"
                  - include: "#variable-bare"
            end: '(?=(?<!\\)(?:$|[

              ;\]}]))'
            patterns:
              - include: "#empty-brackets"
              - include: "#property-list-brackets"
              - include: "#proc-call-args"
  tcl-binary:
    patterns:
      - begin: '(?<=^|\[|{|;)\s*(::)?\b(binary)\b\s+(?!

          )([^\s\[{;

          \]]*)'
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.throw.tcl
          "3":
            name: entity.function.name.binary.tcl
            patterns:
              - include: "#variable"
        end: '\s*(?=$|

          |\]|;|})'
        patterns:
          - include: "#line-escape"
          - begin: '(?<=scan|format)\s+(?!

              )'
            end: '(?=(?<!\\)(?:$|[

              \]};]))'
            patterns:
              - include: "#line-escape"
              - include: "#variable"
              - include: "#glob-match"
          - include: "#proc-call-args"
  tcl-catch:
    patterns:
      - begin: (?<=\[|{|^|tailcall)\s*(::)?\b(catch)\b(?=\s)
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.string.tcl
        end: '(?=\]|}|$|(?<!\\)

          |;)'
        patterns:
          - include: "#brackets"
          - include: "#variable-bare-italic"
  tcl-class-name:
    patterns:
      - include: "#line-escape"
      - include: "#variable"
      - include: "#namespace-separator"
      - include: "#square-brackets"
      - match: (?:(?=\s)\s*)?(\w+)
        name: meta.class
  tcl-core-commands:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(package|include|includes)\b
        captures:
          "1":
            name: support.type.ns.separator
          "2":
            name: keyword.control.import.package.tcl
          "3":
            name: support.type.ns.separator
        comment: imports & requires
        end: '(?=(?<!\\)(?:$|[

          ;}\]]))'
        patterns:
          - begin: '(?<=package)\s*(require|provide)\s*(?!$|

              )'
            captures:
              "1":
                name: keyword.control.package.require.tcl
            end: '(?=(?<!\\)(?:$|[

              ;}\]]))'
            patterns:
              - include: "#line-escape"
              - include: "#constant-numeric"
              - include: "#variable"
              - include: "#namespace-name"
          - begin: (?<=include|includes)
            contentName: string
            end: '(?=(?<!\\)(?:$|[

              ;}\]]))'
      - include: regexp
      - begin: (?<=^|\[|{|;)\s*(::)?\b(format|scan)\b
        captures:
          "1":
            name: support.type
          "2":
            name: keyword.control.format.tcl
        end: '(?=(?<!\\)(?:$|[

          \]};]))'
        patterns:
          - include: "#line-escape"
          - include: "#square-brackets"
          - include: "#variable"
          - include: "#quoted-string"
          - include: "#constant-numeric"
          - captures:
              "1":
                name: support.type.tcl
              "2":
                name: meta.class
              "3":
                name: meta.constant.tcl
              "4":
                name: entity.function.name.tcl
            match: (%)([.])?([0-9]*)?([.duioxXcsfegG])
          - captures:
              "1":
                name: variable
                patterns:
                  - include: "#variable-bare-italic"
            match: '(?<=\s)\s*(?![%.$])([^\s\]}\[{;

              ]*)'
          - include: "#format-brackets"
      - captures:
          "1":
            name: support.type.ns.separator
          "2":
            name: keyword.control.tcl
          "3":
            name: support.type.ns.separator
        match: (?:(?<=^|\[|{|;)\s*(::)?|(?<=::))\b(try|apply|exit|flush|chan|lreverse|error|gets|for|lrepeat|lsearch|fconfigure|chan|open|close|next|while|format|lindex|linsert|concat|lsort|glob|tuapi|subst|upvar|uplevel|fileutil|continue|cluster|break|yield|load|split|switch|yieldto|catch|source|cd|file|wget|join|throw|lrange|lset|lmap|lassign|llength|lwhere|list|return|puts|clock|state|variable|after|task|return|interp)\b(::)?
        name: keyword.control.tcl
  tcl-dict:
    patterns:
      - begin: (?<=^|[\[{;]|tailcall)\s*(::)?\b(dict)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.dict.tcl
        end: ($)|(?=$|[;\]}])
        patterns:
          - include: "#line-escape"
          - include: "#tcl-dict-keywords"
          - include: "#tcl-dict-subcommands"
          - include: "#proc-call-args"
  tcl-dict-blocks:
    begin: '(?<=dict)\b\s+\b(for|update|with)\b(?:(?!$|

      |\]|}|;|\[|{)\s+)?'
    beginCaptures:
      "1":
        name: entity.function.name.dict.for.tcl
    end: '(?<=})|(?=(?<!\\)(?:$|[;\]}

      ]))'
    patterns:
      - include: "#arguments-braced"
      - include: "#curly-brackets"
      - include: "#variable"
      - include: "#variable-bare-italic"
      - include: "#brackets"
  tcl-dict-keywords:
    patterns:
      - include: "#tcl-dict-blocks"
      - include: "#tcl-dict-setters"
  tcl-dict-setters:
    patterns:
      - begin: (?<=dict)\s+\b(set|pull|unset|lappend|incr|push)\b
        beginCaptures:
          "1":
            name: entity.function.name.dict.setters.subcommand.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#line-escape"
          - include: "#square-brackets"
          - begin: (?<=pull|push)\b
            end: '(?=(?<!\\)(?:$|[

              ;\]{}]))'
            patterns:
              - include: "#line-escape"
              - captures:
                  "1":
                    name: meta.constant
                match: (?<=push)\s+(\-\>)
              - include: "#variable"
              - include: "#square-brackets"
              - include: "#variable-bare"
              - begin: \s*({)
                end: (})
                patterns:
                  - match: (?<={)\s*([^\s}]*)
                    name: string.pull.prop.tcl
                  - begin: (?<=\s)([^\s}]*)
                    captures:
                      "1":
                        patterns:
                          - include: "#variable-bare-italic"
                    end: (?=})
                    patterns:
                      - include: "#constant-numeric"
                      - begin: \s*({)
                        captures:
                          "1":
                            name: entity.function.name.dict.pull.props.tcl
                        contentName: string.dict.pull.default.tcl
                        end: (})
                      - include: "#bare-string"
                  - include: "#constant-numeric"
          - begin: (?<=set|unset|lappend|incr)\b
            end: '(?=(?<!\\)(?:$|[

              ;\]{}]))'
            patterns:
              - begin: (?<=set|unset|lappend|incr)\b\s+
                end: \s
                patterns:
                  - include: "#variable-bare-italic"
              - include: "#proc-call-args"
          - include: "#proc-call-args"
          - include: "#variable"
  tcl-dict-subcommands:
    patterns:
      - begin: (?<=dict)\s+(create)\b(?:\s+(?!$))?
        beginCaptures:
          "1":
            name: entity.function.name.dict.subcommand.tcl
        end: (?=\])|(?<!\\)$
        patterns:
          - include: "#line-escape"
          - include: "#property-list"
      - match: (?!\])\s*\b(append|exists|filter|get|get\?|incr|info|keys|lappend|map|merge|remove|replace|set|size|unset|update|values|with|pull|push|pullFrom)\b
        name: entity.function.name.dict.subcommand.tcl
  tcl-entity-commands:
    patterns:
      - begin: \s*(::)?\b(tailcall)\b
        captures:
          "1":
            name: support.type.ns.separator.tcl
          "2":
            name: keyword.control.tailcall.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#line-escape"
          - include: "#proc-call"
          - include: "#namespace-name"
      - begin: (?<=^|[\[{;]|tailcall)\s*(::)?\b(info|eof|read|fileevent|fblocked|flush|gets|chan|coroutine|eval|tls|http|clock|array|encoding|binary|file|task|after|tailcall|rename|callback|state|json|exec|pubsub)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.ent.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#line-escape"
          - include: "#opt"
          - captures:
              "1":
                patterns:
                  - include: "#variable"
                  - include: "#constant-numeric"
                  - include: "#opt"
                  - include: "#namespace-name"
            match:
              '(?<=(?:info|clock|http|binary|coroutine|chan|encoding|file|task|array|after|tailcall|rename|callback|state|json|exec|pubsub))\s+(?:(?!$|{|\[|;|

              )([^\s\]}\[{;

              "]*))?'
          - include: "#proc-call-args"
  tcl-expression-keywords:
    patterns:
      - applyEndPatternLast: 1
        begin: \s*+((::|-)?(if|expr|while))\b\s+(?={)
        beginCaptures:
          "1":
            name: keyword.control.if.tcl
            patterns:
              - include: "#namespace-separator"
              - include: "#opt"
          "2":
            name: support.type
          "3":
            name: keyword.control.if.tcl
        end: (?<=})
        endCaptures:
          "1":
            name: keyword.control.if.end.tcl
        patterns:
          - include: "#if-handlers"
      - begin: (?<=^|\[|{|;)\s*(::|-)?(expr)\b
        beginCaptures:
          "1":
            name: support.type.expr.ns.tcl
          "2":
            name: keyword.control.expr.unbraced.tcl
        end: (?=$|;|}|\])
        patterns:
          - include: "#line-escape"
          - include: "#expressions"
  tcl-foreach:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(foreach)\b(?:(?=\s+{)\s+)?
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.keyword.foreach.loop.tcl
        end: (?=(?<!\\)$)|(?<=})
        patterns:
          - include: "#arguments-braced"
          - include: "#brackets"
          - include: "#variable"
          - include: "#variable-bare-italic"
  tcl-global:
    patterns:
      - begin: (?<=^|{|\[|;)\s*\b(global)\b
        captures:
          "1":
            name: keyword.control.global.tcl
        end: '(?=$|

          |\]|}|;)'
        patterns:
          - include: "#variable-bare-italic"
  tcl-incr:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(incr)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.incr.tcl
        end: '\s*(?=$|

          |}|\]|;)'
        patterns:
          - include: "#line-escape"
          - include: "#constant-numeric"
          - include: "#brackets"
          - include: "#variable"
          - include: "#variable-bare-italic"
  tcl-info:
    patterns:
      - begin: (?<=\[|\{|^|tailcall)\s*(::)?\b(info)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.string.tcl
        end: '(?=(?<!\\)$|[

          ;\]}])'
        patterns:
          - include: "#line-escape"
          - include: "#square-brackets"
          - include: "#tcl-info-exists"
          - include: "#tcl-info-oo"
          - include: "#tcl-info-subcommands"
  tcl-info-exists:
    patterns:
      - begin: \b(exists)\b
        beginCaptures:
          "1":
            name: entity.function.name.info.exists.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#variable"
          - include: "#line-escape"
          - include: "#square-brackets"
          - include: "#variable-bare-italic"
  tcl-info-oo:
    patterns:
      - begin: (?<=info)\s+(class|object)\b
        captures:
          "1":
            name: entity.function.name.info.tcl
        end: '(?=(?<!\\)$|[

          ;\]}])'
        patterns:
          - include: "#line-escape"
          - begin: (?<=object)\s+\b(isa|vars|class)\b
            captures:
              "1":
                name: keyword.control.info.class.tcl
            end: '(?=(?<!\\)$|[

              ;\]}])'
            patterns:
              - include: "#line-escape"
              - include: "#square-brackets"
              - include: "#tcl-class-name"
          - begin: (?<=class)\s+\b(constructor|destructor|instances|subclasses|superclasses)\b
            captures:
              "1":
                name: keyword.control.info.class.tcl
            end: '(?=(?<!\\)$|[

              ;\]}])'
            patterns:
              - include: "#line-escape"
              - include: "#opt"
              - include: "#square-brackets"
              - include: "#tcl-class-name"
          - begin: (?<=class|object)\s+\b(call|definition|filters|forward|methods|methodtype|mixins|variables)\b
            captures:
              "1":
                name: keyword.control.info.class.tcl
            end: '(?=(?<!\\)$|[

              ;\]}])'
            patterns:
              - include: "#line-escape"
              - include: "#opt"
              - include: "#tcl-class-name"
          - include: "#proc-call-args"
  tcl-info-pattern-commands:
    patterns:
      - begin: \b(command(?:s)?|globals|locals|procs|vars|functions)\b
        captures:
          "1":
            name: entity.function.name.tcl
        end: '\s*(?=$|

          |}|\]|;)'
        patterns:
          - include: "#constant-numeric"
          - include: "#namespace-name"
          - include: "#glob-match"
  tcl-info-subcommands:
    patterns:
      - include: "#tcl-info-pattern-commands"
      - begin: \b(level|frame|coroutine|nameofexecutable|nameofexe|args|body|cmdcount|complete|default|hostname|library|loaded|patchlevel|script|sharedlibextension|tclversion)\b\s*
        captures:
          "1":
            name: entity.function.name.tcl
        end: '\s*(?=$|

          |}|\]|;)'
        patterns:
          - include: "#constant-numeric"
          - include: "#namespace-name"
          - include: "#proc-call-args"
  tcl-lassign:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(lassign)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.lassign.tcl
        end: '\s*(?=$|

          |\]|})'
        patterns:
          - include: "#line-escape"
          - include: "#brackets"
          - include: "#variable"
          - include: "#variable-bare-italic"
  tcl-namespace:
    patterns:
      - begin: (?<=^|[{\[;]|tailcall)\s*(::)?\b(namespace)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.namespace.tcl
        end: (?=(?<!\\)$)|(?=[\];}])
        patterns:
          - include: "#line-escape"
          - include: "#tcl-namespace-eval"
          - include: "#tcl-namespace-entity-commands"
          - include: "#tcl-namespace-subcommands"
          - include: "#proc-call-args"
  tcl-namespace-entity-commands:
    begin: \s*\b(delete)\b\s*
    beginCaptures:
      "1":
        name: keyword.control.name.namespace.eval.tcl
    end: '(?=(?<!\\

      )$|(?<!\\)

      |[}\];{\[])'
    patterns:
      - include: "#variable"
      - include: "#line-escape"
      - include: "#namespace-name"
      - include: "#brackets"
  tcl-namespace-eval:
    begin: \s*\b(eval|exists)\b\s*
    beginCaptures:
      "1":
        name: keyword.control.namespace.eval.tcl
    end: '(?=(?<!\\

      )$|(?<!\\)

      |[}\];{\[])'
    patterns:
      - include: "#line-escape"
      - include: "#namespace-name"
      - include: "#brackets"
  tcl-namespace-subcommands:
    captures:
      "1":
        name: entity.function.name.namespace.subcommand.tcl
    match: \s*\b(exists|ensemble|children|code|current|export|forget|import|inscope|origin|parent|path|qualifiers|tail|upvar|unknown|which)\b
  tcl-oo:
    comment: handle tcl specific commands and evaluation
    patterns:
      - begin: (?<=^|[\[{;]|tailcall)\s*((?:::)?(oo)::)?\b((?:module|mixin|define|(?:meta)?class|objdefine|Helpers|InfoObject|copy|object|Slot|UnknownDefinition)\b|Obj[0-9]*)
        beginCaptures:
          "1":
            name: entity.function.name.tcl
          "2":
            name: keyword.control.oo.tcl
          "3":
            name: keyword.control.oo.command
        end: '(?=$|[

          ;}\]\[{])'
        patterns:
          - include: "#opt"
          - include: "#variable"
          - include: "#tcl-oo-commands"
  tcl-oo-commands:
    patterns:
      - include: "#tcl-oo-create"
      - include: "#tcl-oo-define"
  tcl-oo-constructor:
    patterns:
      - begin: (?<=^|{)\s*\b(constructor)\b(?:(?!$)\s+)?
        captures:
          "1":
            name: keyword.control.oo.eval.constructor.tcl
          "2":
            name: variable.other.tcl
        end: (?<=})
        patterns:
          - include: "#proc-arguments"
          - include: "#brackets"
  tcl-oo-create:
    patterns:
      - begin: (?<=class|module|metaclass)\b\s+\b(create)\b
        captures:
          "1":
            name: entity.function.name.oo.create.tcl
        end: '(?=$|[

          ;\]])|(?<=})'
        patterns:
          - begin: '(?<=create)\s+(?!$|[\]

              \[$;\}])'
            end: \s
            patterns:
              - include: "#variable"
              - include: "#tcl-class-name"
          - include: "#tcl-oo-eval-brackets"
          - include: "#variable"
  tcl-oo-define:
    patterns:
      - begin: (?<=define)
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - begin: '(?<=define)\s+(?!$|[

              ;\]}\[$])'
            end: \s
            patterns:
              - include: "#line-escape"
              - include: "#tcl-class-name"
          - include: "#line-escape"
          - include: "#variable"
          - include: "#square-brackets"
          - include: "#opt"
          - include: "#tcl-oo-define-constructor"
          - include: "#tcl-oo-define-destructor"
          - include: "#tcl-oo-define-method"
          - include: "#tcl-oo-eval-brackets"
          - include: "#namespace-name"
  tcl-oo-define-constructor:
    patterns:
      - begin: '(constructor)\s+(?!$|[

          ;\]}])'
        beginCaptures:
          "1":
            name: keyword.control.oo.define.constructor.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#proc-arguments"
          - include: "#brackets"
  tcl-oo-define-destructor:
    patterns:
      - begin: (destructor)
        beginCaptures:
          "1":
            name: keyword.control.oo.define.constructor.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#brackets"
  tcl-oo-define-method:
    patterns:
      - begin: '(method)\s+([^\s]*)\s+(?!$|[

          ;\]}])'
        beginCaptures:
          "1":
            name: keyword.control.oo.define.method.tcl
          "2":
            patterns:
              - include: "#namespace-name"
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#proc-arguments"
          - include: "#brackets"
  tcl-oo-destructor:
    patterns:
      - begin: (?<=^|{)\s*\b(destructor)\b
        captures:
          "1":
            name: keyword.contorl.oo.eval.destructor.tcl
        end: (?<=})
        patterns:
          - include: "#brackets"
  tcl-oo-eval-brackets:
    comment: evaluating inside of a class create or define
    patterns:
      - begin: \s*(\{)
        beginCaptures:
          "1":
            name: meta.bracket.curly.oo.open.tcl
        end: \s*(\})
        endCaptures:
          "1":
            name: meta.bracket.curly.oo.close.tcl
        patterns:
          - include: "#line-escape"
          - include: "#tcl-oo-my"
          - include: "#tcl-oo-constructor"
          - include: "#tcl-oo-destructor"
          - include: "#tcl-oo-method"
          - include: "#tcl-oo-variable"
          - include: "#tcl-oo-mixin"
          - include: "#tcl-oo-exports"
          - include: "#proc-call"
  tcl-oo-exports:
    patterns:
      - begin: (?<=^|[{;])\s*(unexport|export)
        captures:
          "1":
            name: keyword.control.oo.unexport.tcl
        end: '(?=(?<!\\)(?:$|[

          ;]))'
        patterns:
          - include: "#line-escape"
          - include: "#namespace-name"
  tcl-oo-keywords:
    patterns:
      - include: "#tcl-oo-my"
      - include: "#tcl-oo-self"
  tcl-oo-method:
    patterns:
      - applyEndPatternLast: 1
        begin: \s*(method)\s+([^\s]*)\s*
        beginCaptures:
          "1":
            name: keyword.control.oo.method.tcl"
          "2":
            name: entity.function.name.oo.method.tcl
        end: \s*
        patterns:
          - include: "#proc-arguments"
          - include: "#tcl-oo-brackets"
  tcl-oo-mixin:
    patterns:
      - begin: \s*\b(mixin|superclass)\b
        captures:
          "1":
            name: keyword.control.oo.mixin.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#tcl-class-name"
  tcl-oo-my:
    patterns:
      - begin: (?<=^|\[|{|;)\s*+\b(my)\b
        beginCaptures:
          "1":
            name: keyword.control.oo.my.punctuation.italic.tcl
        end: '\s*(?=$|

          |;|\]|})'
        patterns:
          - begin: (?<=my)\b\s+\b(variable)\b
            beginCaptures:
              "1":
                name: keyword.control.my.variable.oo.tcl
            end: "(?=$|^|

              |;)"
            patterns:
              - include: "#line-escape"
              - match: ([^\s|\]|}|$])
                name: variable
          - captures:
              "1":
                name: entity.function.name.my.method.oo.tcl
            match: (?<=my)\b\s+([^\s\]};]*)
          - include: "#proc-call-args"
  tcl-oo-self:
    patterns:
      - captures:
          "1":
            name: keyword.control.oo.my.punctuation.italic.tcl
        match: (?<=^|\[)\s*(self)
      - captures:
          "1":
            name: entity.function.name.punctuation.italic.tcl
        match: (?<=self)\s+(next)
  tcl-oo-variable:
    patterns:
      - begin: (?<=^|[;{])\s*(variable)\b
        captures:
          "1":
            name: keyword.control.oo.variable.tcl
        end: '\s*(?=(?<!\\)(?:$|[;

          ]))'
        patterns:
          - include: "#line-escape"
          - include: "#variable-bare-italic"
  tcl-proc:
    patterns:
      - begin: '(?<=^|[\[{;])\s*(::)?\b(proc)\b\s+([^\s

          ]+)\s+(?={|\b|\[|"|\\$)'
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.proc.tcl
          "3":
            patterns:
              - include: "#variable"
              - include: "#brackets"
              - include: "#namespace-name"
        end: (?=(?<!\\)$)
        patterns:
          - include: "#quoted-string"
          - include: "#proc-arguments"
          - include: "#brackets"
  tcl-puts:
    patterns:
      - begin: (?<=^|\[|{|;)\s*\b(puts)\b
        beginCaptures:
          "1":
            name: keyword.control.puts.tcl
        end: '(?=$|

          |}|\]|;)'
        patterns:
          - include: "#line-escape"
          - include: "#opt"
          - match: '(?:(?<=puts)|^|(?<=-nonewline))\s*+(?!

              |$)([^\s$

              ;}\]\[{"]*+)(?!\s*(?:$|

              |}|\]|;|^))'
            name: support.type.puts.channel.punctuation.italic.tcl
          - include: "#square-brackets"
          - include: "#curly-string-brackets"
          - include: "#quoted-string"
          - include: "#bare-string"
  tcl-set:
    patterns:
      - begin: '(?<=^|[\[{;]|tailcall)\s*(::)?\b(set|variable)\b\s+(?!

          |$)'
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.set.tcl
        end: (?=(?<!\\)(?:$|[;\]}]))
        patterns:
          - include: "#line-escape"
          - include: "#variable"
          - include: "#variable-bare"
          - include: "#regexp"
          - include: "#proc-call-args"
  tcl-setters:
    patterns:
      - include: "#tcl-set"
      - include: "#tcl-unset"
      - include: "#tcl-append"
  tcl-state-common-options:
    patterns:
      - include: "#tcl-state-option-title"
      - include: "#tcl-state-option-items"
      - match: (?<=^|;)\s*(config|vendor)
        name: keyword.control.tcl
      - begin: (?<=config|default|vendor)\s*+({)
        end: \s*(})
        patterns:
          - captures:
              "1":
                name: variable
              "2":
                name: string
                patterns:
                  - include: "#constant-numeric"
            match: (\s*[^\s|}|{|;]*)(\s+[^\s|}|{|;]*)
          - include: "#curly-string-brackets"
  tcl-state-conditions:
    patterns:
      - include: "#variable-non-substituting"
      - begin: \s*+({)
        end: \s*(})
        patterns:
          - include: "#tcl-state-conditions"
          - include: "#constant-numeric"
          - match: (?<=\s|{|^)(\*)\s
            name: meta.class
          - captures:
              "1":
                name: variable
            match: (?<={|^|;)\s*([^\s|}|\*|;]*)\s+
          - match: \b(set|modified|change(?:d|s)|created|removed|deleted|existed|defined|exists|created|added)\b\s*(?=$|}|;)
            name: entity.function.name
          - match: ([^\s]*)\s*(?=$)
            name: meta.class
          - match: \b(is|becomes|was|not|reverse)\b(?!\s*\|)
            name: punctuation.italic.entity.name.function
          - match:
              (?<=\s)(\b(?:rises above|include|ne|not equal|eq|equal|greater equal|ge|greather
              than|ge|less equal|le|falls below|divisible by|is in|in|not in|ni|match|regexp|notInclude|startsWith|starts
              with|endsWith|ends with|command|isType|eval)\b|(?:\>|=|==|<=|>=|>_|_<|%))(?=\s*\|)
            name: support.type
          - begin: \s*+(\|)
            beginCaptures:
              "1":
                name: entity.function.name.condition.tcl
            end: '(?=$|;|

              |}|\])'
            name: string
            patterns:
              - include: "#variable-non-substituting"
              - include: "#glob-match"
              - include: "#constant-numeric"
  tcl-state-configure:
    patterns:
      - begin: '(?<=configure|apply_middleware)\s+(?!$|

          |;|\]|}|^)([^\s$}\]\[{;\\]*)'
        beginCaptures:
          "1":
            name: meta.class
          "2":
            patterns:
              - include: "#tcl-class-name"
        end: '(?=$|

          |\]|}|;)'
        patterns:
          - include: "#line-escape"
          - include: "#proc-call-args"
  tcl-state-id:
    patterns:
      - captures:
          "1":
            name: markup.bold.keyword.state.register.tcl
          "2":
            patterns:
              - include: "#quoted-string"
              - include: "#curly-string-brackets"
              - captures:
                  "1":
                    name: string
                  "2":
                    name: invalid.illegal.state.title.tcl
                match: '\b([^\s]*)\b\s*([^$|

                  ]*)?'
        match: '(?<=^|\s)\s*(id)\b(\s+[^$|

          |;]*)'
  tcl-state-keywords:
    patterns:
      - include: "#line-escape"
      - match: (?<=state)\s+\b(set|get|pull|register|apply_middleware|configure|push|subscription|query|json|serialize)\b
        name: entity.function.state.name.tcl
      - captures:
          "1":
            name: entity.function.state.name.tcl
            patterns:
              - include: "#namespace-separator"
        match: (?<=state::)([^\s\]};]*)
  tcl-state-option-attributes:
    patterns:
      - begin: (?<=^|\s)\s*(attributes|formatters)\b\s+{
        beginCaptures:
          "1":
            name: keyword.control.state.attributes.tcl
        end: \s*(})
        patterns:
          - include: "#variable-non-substituting"
          - begin: \s*\[
            end: \s*]
            patterns:
              - include: "#variable-non-substituting"
              - include: "#proc-call"
          - captures:
              "1":
                name: variable
              "2":
                name: support.type.state.attribute.name.tcl
            match: (?<!\|)(\s+[^\s|\$|\[|\]|}|{|;]*)(\s+[^\s|\$|\[|\]|}|{|;]*)
          - match: \s*(\|)
            name: entity.function.name.separator.tcl
          - include: "#variable-non-substituting"
          - include: "#constant-numeric"
          - include: "#curly-string-brackets"
  tcl-state-option-descriptions:
    patterns:
      - include: "#tcl-state-option-descriptions-titles"
      - include: "#tcl-state-option-descriptions-descriptions"
  tcl-state-option-descriptions-descriptions:
    patterns:
      - begin: (?<=^|\s)\s*(descriptions)\b\s+{
        beginCaptures:
          "1":
            name: keyword.control.state.attributes.tcl
        end: \s*}
        patterns:
          - include: "#quoted-string"
          - include: "#tcl-state-option-descriptions-patterns"
          - begin: \s*({)
            end: \s*}
            patterns:
              - include: "#tcl-state-option-descriptions-patterns"
  tcl-state-option-descriptions-patterns:
    patterns:
      - include: "#variable-non-substituting"
      - include: "#quoted-string"
      - begin: (?<=^|{)\s*([^\s]*)\s+(?=")
        beginCaptures:
          "1":
            name: support.type
        end: (?<=")
        patterns:
          - include: "#quoted-string"
      - include: "#constant-numeric"
      - begin: (?<=^|{)\s*(items)\s+{
        beginCaptures:
          "1":
            name: support.type
        end: \s*(})
        patterns:
          - include: "#tcl-state-option-descriptions-patterns"
          - include: "#quoted-string"
      - begin: (?<=^|{)\s*([^\s]*)\s+(?={)
        beginCaptures:
          "1":
            name: support.type
        end: (?<=})
        patterns:
          - include: "#html-curly-brackets"
  tcl-state-option-descriptions-titles:
    patterns:
      - begin: (?<=^|\s)\s*(titles)\b\s+{
        beginCaptures:
          "1":
            name: keyword.control.state.attributes.tcl
        contentName: variable
        end: \s*(})
        patterns:
          - include: "#tcl-state-option-descriptions-patterns"
          - include: "#tcl-state-option-descriptions-titles"
  tcl-state-option-evaluate:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=^|\s)\s*(evaluate)\b\s*
        beginCaptures:
          "1":
            name: keyword.state.register.tcl
        end: (?<=})
        patterns:
          - include: "#proc-arguments"
          - include: "#brackets"
  tcl-state-option-items:
    patterns:
      - begin: (?<=^|\s)\s*(items)\b
        beginCaptures:
          "1":
            name: keyword.state.register.tcl
        end: (?<=})
        patterns:
          - begin: \s*+({)
            end: \s*(})
            patterns:
              - begin: (?<=^|;)\s*\b(optional|required|key)?\b\s+(string|bool|number|string|ip|json|mac|enum|ni|match|include|range|percent|greater|less|dict|array|numberArray)\b\s+([^\s|\||;|}]*)
                beginCaptures:
                  "1":
                    name: meta.constant
                    patterns:
                      - match: (key)
                        name: markup.bold
                  "2":
                    name: support.type
                  "3":
                    name: variable
                end: '\s*(?=$|;|

                  )'
                patterns:
                  - begin: \s*+(\|)
                    beginCaptures:
                      "1":
                        name: support.type
                    end: "(?=$|;|

                      )"
                    name: string
                    patterns:
                      - include: "#constant-numeric"
  tcl-state-option-title:
    patterns:
      - captures:
          "1":
            name: keyword.state.register.tcl
          "2":
            patterns:
              - include: "#quoted-string"
              - include: "#curly-string-brackets"
              - captures:
                  "1":
                    name: string
                  "2":
                    name: invalid.illegal.state.title.tcl
                match: '\b([^\s]*)\b\s*([^$|

                  ]*)?'
        match: '(?<=^|\s)\s*(title)\b(\s+[^$|

          |;]*)'
  tcl-state-register:
    patterns:
      - begin: '(?<=register)(\s+[^\s\[\];

          ]+)?'
        beginCaptures:
          "1":
            name: meta.constant
            patterns:
              - include: "#tcl-class-name"
        end: (?<=})
        patterns:
          - include: "#line-escape"
          - include: "#square-brackets"
          - begin: \s*({)
            captures:
              "1":
                name: meta.bracket.state.register.tcl
            end: \s*(})
            patterns:
              - include: "#tcl-state-option-title"
              - include: "#tcl-state-option-items"
              - begin: (?<=^|\s)(middlewares|config|default)\b(?=\s*{)
                beginCaptures:
                  "1":
                    name: keyword.state.register.tcl
                end: (?<=})
                patterns:
                  - include: "#variable-non-substituting"
                  - begin: (?<=config|default)\s+({)
                    captures:
                      "1":
                        name: meta.bracket.state.config.tcl
                    end: \s*(})
                    patterns:
                      - include: "#variable-non-substituting"
                      - begin: \s*([^\s|}|{|;]*)\s+({)
                        beginCaptures:
                          "1":
                            name: variable
                        end: (})
                        patterns:
                          - include: "#property-list"
                      - captures:
                          "1":
                            name: variable
                            patterns:
                              - include: "#variable"
                          "2":
                            name: string
                            patterns:
                              - include: "#constant-numeric"
                        match: \s*([^\s|}|{|;]*)(\s+[^}|{|;]*)
                      - include: "#curly-string-brackets"
                  - begin: (?<=middlewares)\s*+({)
                    end: \s*(})
                    patterns:
                      - captures:
                          "1":
                            name: meta.class.state.middleware.tcl
                        match: \s*([^\s|}|;]*)
  tcl-state-setter-getter:
    patterns:
      - begin: (?<=set|get|pull|push)\b
        end: '(?=(?<!\\)$|[

          ;\]}])'
        patterns:
          - include: "#line-escape"
          - begin: (?<=set|get|pull|push)\b\s*
            end: (?=$|[\s\]};])
            patterns:
              - include: "#tcl-class-name"
          - begin: \s*({)
            beginCaptures:
              "1":
                name: entity.function.name.state.brace.open.tcl
            end: (})
            endCaptures:
              "1":
                name: entity.function.name.state.brace.close.tcl
            patterns:
              - captures:
                  "1":
                    name: string
                  "2":
                    name: variable
                match: '\s*([^\s|}|\]|$|

                  ]*)\s+([^\s|}]*)'
          - include: "#brackets"
          - include: "#variable"
          - include: "#variable-bare"
  tcl-state-subscribe:
    patterns:
      - begin: \s*\b(subscribe)\b
        beginCaptures:
          "1":
            name: entity.function.name.state.subscribe.tcl
        end: '(?<=})|(?=$|

          |;|\])'
        patterns:
          - captures:
              "1":
                patterns:
                  - include: "#variable"
            match: '(?<=subscribe)\b(?!\[)(\s+[^\s

              ]*)(?:(?!\s*(?:$|;|}|\]))\s*)?'
            name: meta.class.state.name
          - captures:
              "1":
                patterns:
                  - include: "#variable"
            match: (?=\s*\$)(\s*[^\s]*)(?:(?!\s*(?:$|;|}|\]))\s*)?
          - include: "#square-brackets"
          - include: "#empty-brackets"
          - begin: (?<!})\s*({)
            beginCaptures:
              "1":
                name: meta.brace.state.subscribe.params.open.tcl
            end: \s*(})
            endCaptures:
              "1":
                name: meta.brace.state.subscribe.params.close.tcl
            patterns:
              - include: "#tcl-state-common-options"
              - include: "#variable-non-substituting"
              - include: "#tcl-state-id"
              - begin: (?<=^|\s|;)\s*(conditions)\b
                beginCaptures:
                  "1":
                    name: keyword.state.register.tcl
                end: (?<=})
                patterns:
                  - include: "#tcl-state-conditions"
          - include: "#brackets"
  tcl-state-unsubscribe:
    patterns:
      - begin: \b(unsubscribe)\b
        end: '(?=$|

          |;|\]|})'
        patterns:
          - include: "#opt"
          - include: "#glob-match"
  tcl-string:
    patterns:
      - begin: (?<=^|[\[{;]|tailcall)\s*(::)?\b(string)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.string.tcl
        end: '(?=}|\]|;|$|

          )'
        patterns:
          - include: "#tcl-string-is"
          - include: "#tcl-string-match"
          - include: "#tcl-string-matchfirst"
          - include: "#tcl-string-map"
          - include: "#tcl-string-subcommands"
          - include: "#proc-call-args"
  tcl-string-is:
    patterns:
      - captures:
          "1":
            name: entity.function.name.string.is.tcl
          "2":
            name: support.type
            patterns:
              - include: "#variable"
        match: \s*\b(is)\b\s+([^\s}\];]*)
  tcl-string-map:
    patterns:
      - begin: (?<=string)\b\s+(map)\b
        captures:
          "1":
            name: entity.function.name.string.map.tcl
        end: '(?=$|

          |\]|}|{|\[)'
        patterns:
          - include: "#square-brackets"
          - include: "#variable"
          - begin: \s*({)
            end: \s*(})
            patterns:
              - match: (?<=[^\\]\\\\)(.)
                name: string
              - match: ([\[\]])
                name: string
              - include: "#quoted-string"
              - include: "#curly-string-brackets"
              - include: "#bare-string"
  tcl-string-match:
    patterns:
      - begin: (?<=string)\s+\b(match)\b
        captures:
          "1":
            name: entity.function.name.string.is.tcl
          "2":
            name: string
        end: '(?=$|

          |\]|}|;)'
        patterns:
          - include: "#line-escape"
          - include: "#variable"
          - include: "#glob-match"
          - include: "#curly-string-brackets"
          - include: "#square-brackets"
          - include: "#constant-numeric"
  tcl-string-matchfirst:
    patterns:
      - begin: \s*\b(matchfirst)\b
        captures:
          "1":
            name: entity.function.name.string.is.tcl
        end: \s*(?=\]|}|$|;)
        patterns:
          - include: "#line-escape"
          - include: "#curly-string-brackets"
          - include: "#constant-numeric"
          - include: "#glob-match"
          - include: "#variable"
  tcl-string-subcommands:
    patterns:
      - match: (?<=string)\b\s+(match|compact|toupper|tolower|bytelength|compare|cat|first|index|is|last|length|map|range|repeat|replace|reverse|totitle|trim|trimleft|trimright|wordend|wordstart|equal)\s+
        name: entity.function.name.string.subcommands.tcl
  tcl-subst:
    patterns:
      - begin: (?<=^|[\[{;])\s*((?:::)?\bsubst\b)(?!\s*$)
        beginCaptures:
          "1":
            name: keyword.control.subst.tcl
            patterns:
              - include: "#namespace-separator"
        end: (?=(?<!\\)(?:$|[;\]}]))|(?<=})
        patterns:
          - begin: (?<=subst)\b((?:\s+(?:-nobackslashes|-nocommands|-novariables))?)(?!\s*$)
            beginCaptures:
              "1":
                patterns:
                  - include: "#opt"
            end: (?=(?<!\\)(?:$|[;\]}]))|(?<=})
            patterns:
              - include: "#proc-call-args"
  tcl-switch:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(switch)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.switch.tcl
          "3":
            name: entity.function.name.state.tcl
        end: (?=(?<!\\)(?:$|[;\]}]))|(?<=})
        patterns:
          - begin: '(?<=switch)\b(\s+(?!$)(?:(?:-|\$)[^\s

              ]*\s+|\[[^\]

              ]*(?=\]))*+)(?!\s*{|\[|\s*$)'
            beginCaptures:
              "1":
                patterns:
                  - include: "#line-escape"
                  - include: "#opt"
                  - include: "#double-dash"
                  - include: "#variable"
                  - include: "#square-brackets"
            end: (?=(?<!\\)(?:$|[;\]}]))
            patterns:
              - include: "#line-escape"
              - include: "#variable"
              - match: (default)
                name: keyword.control.default.switch.unbraced.tcl
              - include: "#brackets"
              - include: "#bare-string"
          - begin: '(?<=switch)\b(\s+(?!$)(?:(?:-|\$)[^\s]*\s+|\[[^\]

              ]*(?=\]))*+)(?=\s*{)'
            beginCaptures:
              "1":
                patterns:
                  - include: "#line-escape"
                  - include: "#opt"
                  - include: "#double-dash"
                  - include: "#variable"
                  - include: "#square-brackets"
            end: (?=(?<!\\)(?:$|[;\]}]))|(?<=})
            patterns:
              - include: "#line-escape"
              - include: "#variable"
              - begin: \s*+({)
                beginCaptures:
                  "1":
                    name: meta.brace.switch.open.tcl
                end: (})
                endCaptures:
                  "1":
                    name: meta.brace.switch.close.tcl
                patterns:
                  - include: "#variable-non-substituting"
                  - include: "#empty-brackets"
                  - match: \s?(-)\s
                    name: meta.constant.switch.next.tcl
                  - match: \s*\b(default)\b\s+(?={)
                    name: keyword.control.punctuation.italic.tcl
                  - include: "#brackets"
                  - include: "#glob-match"
                  - include: "#bare-string"
              - match: (default)
                name: keyword.control.default.switch.unbraced.tcl
              - include: "#brackets"
              - include: "#bare-string"
          - begin:
              '(?<=switch)\b(\s+(?!$)(?:(?!(?<!\\)$)(?:-|\$)[^\s]*(?:(?!\s*$)\s+)?|\[[^\]

              ]*(?=\]))*+)'
            beginCaptures:
              "1":
                patterns:
                  - include: "#line-escape"
                  - include: "#opt"
                  - include: "#double-dash"
                  - include: "#variable"
                  - include: "#square-brackets"
            end: (?=(?<!\\)(?:$|[;\]}]))|(?<=})
            patterns:
              - include: "#line-escape"
              - include: "#variable"
              - match: (default)
                name: keyword.control.default.switch.unbraced.tcl
              - include: "#brackets"
              - include: "#bare-string"
  tcl-throw:
    patterns:
      - begin: '(?<=^|\[|{|;)\s*(::)?\b(throw)\b\s+(?!

          )([^\s]*)'
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.throw.tcl
          "3":
            name: support.type
            patterns:
              - include: "#variable"
        end: '\s*(?=$|

          |}|\]|;)'
        patterns:
          - include: "#line-escape"
          - include: "#proc-call-args"
  tcl-try-catch:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=^|[\[{;]|tailcall)\s*(::)?\b(try)\b
        beginCaptures:
          "1":
            name: support.type.ns.separator
          "2":
            name: keyword.control.try.tcl
        end: '(?=(?<!\\)(?:$|[

          ;\]}]))'
        patterns:
          - include: "#line-escape"
          - include: "#tcl-try-trap"
          - include: "#tcl-try-on"
          - include: "#tcl-try-finally"
          - include: "#brackets"
  tcl-try-finally:
    patterns:
      - begin: (?<=})\s+(finally)\s+(?=[{\[])
        beginCaptures:
          "1":
            name: keyword.control.try.onerror.tcl
        end: (?<=[}\];])
        patterns:
          - include: "#brackets"
  tcl-try-on:
    patterns:
      - applyEndPatternLast: 1
        begin:
          '(?<=}|\])\s+\b(on)\b\s+\b(error|return|break|continue|ok|[0-9]*)\b(?:\s+(?={|\b|\$|"|\[|\\

          )|\s+(?!$|

          ))'
        beginCaptures:
          "1":
            name: keyword.control.try.on.tcl
          "2":
            name: keyword.control.try.on.tcl
            patterns:
              - include: "#constant-numeric"
        end: '\s*(?=$|[{\[;

          ])'
        patterns:
          - include: "#line-escape"
          - include: "#arguments-braced"
          - captures:
              "1":
                name: variable.name
            match: '(?!\s)([^\s;\]}

              $]*)(?=\s+(?:{|\[|

              |\\

              ))'
          - include: "#variable"
  tcl-try-trap:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=}|\])\s+\b(trap)\b
        beginCaptures:
          "1":
            name: keyword.control.try.trap.tcl
        end: (?=\s*{)
        patterns:
          - include: "#line-escape"
          - include: "#variable"
          - include: "#square-brackets"
          - captures:
              "1":
                name: support.type.try.trap.name.tcl
            match: '(?<=trap)\s+(?=\b)([^\s;\]\[}

              $]+)(?:(?!

              |$|\\)\s+)?'
          - begin: (?<=trap)\s+({)
            contentName: support.type.try.trap.name.tcl
            end: '(})(?:\s+(?!

              |$|^))?'
          - include: "#arguments-braced"
          - match: '([^\s$

              ;\[{}\]]+)(?=\s+{)'
            name: variable
  tcl-unset:
    patterns:
      - begin: (?<=^|\[|{|;)\s*(::)?\b(unset)
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.unset.tcl
        contentName: punctuation.variable.set.italic.tcl
        end: '\s*(?=$|;|

          |}|\])'
        patterns:
          - include: "#line-escape"
          - include: "#opt"
          - include: "#brackets"
          - captures:
              "1":
                name: punctuation.variable.set.italic.tcl
            match: \s*([^\s|}|\]|;]*)
  tcl-upvar:
    patterns:
      - begin: (?<=\[|\{|^|tailcall)\s*(::)?\b(upvar)\b
        beginCaptures:
          "1":
            name: support.type
          "2":
            name: keyword.control.string.tcl
        end: \s*(?=\]|}|$|;)
        patterns:
          - include: "#line-escape"
          - include: "#constant-numeric"
          - include: "#variable"
          - include: "#variable-bare-italic"
  tcl-vwait:
    patterns:
      - include: "#line-escape"
      - begin: '(?<=^|\[|{|;)\s*(::)?\b(vwait)\b\s*+(?!$|

          |;|^|\]|})'
        beginCaptures:
          "1":
            name: support.type.ns.tcl
          "2":
            name: keyword.control.vwait.tcl
        comment: vwait varName
        end: '(?=$|

          |;|\]|}|\s)\s*([^$

          ^\];}\[\\]*)?(\\(?!

          ))?'
        endCaptures:
          "1":
            name: invalid.illegal.numargs.tcl
          "2":
            name: invalid.illegal.escape.tcl
        patterns:
          - include: "#line-escape"
          - include: "#variable"
          - include: "#variable-bare-italic"
  variable:
    patterns:
      - include: "#spread-variable"
      - match: '^\s*(\$)\s*(?=

          |$|\]|})'
        name: support.type
      - captures:
          "1":
            name: support.type.variable.indicator.tcl
          "2":
            name: entity.function.name.variable.brace.open.tcl
          "3":
            patterns:
              - include: "#namespace-separator"
              - include: "#variable"
              - match: ([^\s:"}{]+)
                name: variable.name
          "4":
            patterns:
              - begin: (\()
                beginCaptures:
                  "1":
                    name: support.type
                contentName: punctuation.italic
                end: (\))
                endCaptures:
                  "1":
                    name: support.type
                patterns:
                  - include: "#opt"
                  - include: "#proc-call-args"
          "5":
            name: entity.function.name.variable.brace.close.tcl
          "6":
            patterns:
              - include: "#proc-call-args"
              - include: "#bare-string"
          "7":
            patterns:
              - include: "#namespace-separator"
              - match: ([^\s:"}{\\\]\[]+)
                name: variable.name
          "8":
            patterns:
              - begin: (\()
                beginCaptures:
                  "1":
                    name: entity.function.name.tcl
                contentName: punctuation.italic
                end: (\))
                endCaptures:
                  "1":
                    name: entity.function.name.tcl
                patterns:
                  - include: "#opt"
                  - include: "#proc-call-args"
        match: '\s*(?:(?![\]

          "};])|(?=[$]))(?<!(?<!\\)\\)(\$)(?:({)([^}\s\]"\)\(\$]*)(\([^\(\)]*\))?(})([^\s\[\];

          "{}]*)?|(?=[A-Za-z0-9_:])([^\s\*\[}\]/"\);\(\\$,\-\+''\*]*)(\([^\s\[''\\;}\]")($,+*]*\))?)'
  variable-bare:
    patterns:
      - begin: '(?<=\s|^|\*|{)\s*(?!$|[$

          ;}{\]\[])'
        end: '(?=(?<!\\)$|[

          \];\[{}]|(?=\s))'
        patterns:
          - include: "#variable"
          - include: "#quoted-string"
          - begin: (\()
            beginCaptures:
              "1":
                name: entity.function.name.array.open.tcl
            contentName: punctuation.italic
            end: (\))
            endCaptures:
              "1":
                name: entity.function.name.array.close.tcl
            patterns:
              - include: "#opt"
              - include: "#proc-call-args"
          - include: "#namespace-separator"
          - match: ([,])
            name: variable
          - match: (?!(?<!\\)$|\[|\])([^:\s}\]\[\({",;$]*)
            name: variable
          - match: (?<=\*)(?!\s|$|\[|\])([^:\s}\[{\]",;]*)
            name: variable
          - match: (:)
            name: string
          - include: "#proc-call-args"
      - include: "#variable"
  variable-bare-italic:
    patterns:
      - begin: '\s*(?!$|[$\[;

          {])'
        end: '(?=(?<!\\)$|[

          \];\[{}\s])'
        patterns:
          - include: "#quoted-string"
          - include: "#variable"
          - include: "#brackets"
          - begin: \s*(\()
            beginCaptures:
              "1":
                name: entity.function.name.array.open.tcl
            contentName: punctuation.italic
            end: (\))
            endCaptures:
              "1":
                name: entity.function.name.array.close.tcl
            patterns:
              - include: "#opt"
              - include: "#proc-call-args"
          - include: "#namespace-separator"
          - match: (?!\s)([^\s\[(?:::){;\$"\]};]*)
            name: punctuation.italic.variable
          - match: (?<=\*)(?!\s)([^\s\[(?:::){;$"\];}]*)
            name: punctuation.italic.variable
  variable-braced:
    patterns:
      - begin: (?={)({)
        end: (}|\s)
        patterns:
          - include: "#variable-bare"
  variable-non-substituting:
    patterns:
      - include: "#spread-variable"
      - match: '^\s*+(\$)\s*(?=

          |$)'
        name: support.type
      - captures:
          "1":
            name: support.type.variable.indicator.tcl
          "2":
            name: entity.function.name.variable.brace.open.tcl
          "3":
            patterns:
              - include: "#namespace-separator"
              - include: "#variable"
              - match: ([^\s:"}{]+)
                name: meta.constant.tcl
          "4":
            patterns:
              - begin: (\()
                beginCaptures:
                  "1":
                    name: support.type
                contentName: punctuation.italic.meta.constant
                end: (\))
                endCaptures:
                  "1":
                    name: support.type
                patterns:
                  - include: "#proc-call-args"
          "5":
            name: entity.function.name.variable.brace.close.tcl
          "6":
            patterns:
              - include: "#namespace-separator"
              - match: ([^\s:"}{\\\]\[]+)
                name: meta.constant
          "7":
            patterns:
              - begin: (\()
                beginCaptures:
                  "1":
                    name: entity.function.name
                contentName: punctuation.italic.meta.constant
                end: (\))
                endCaptures:
                  "1":
                    name: entity.function.name
                patterns:
                  - include: "#proc-call-args"
        match: '\s*+(?:(?!\]|

          |"|>|<|,))(?<!(?<!\\)\\)(\$)(?:({)([^}\s\]"\)\(\$]*)(\(.*\))?(})|(?=[A-Za-z0-9_:])([^\s\,<>\*}\]/"\);\(\\\$,\-\+\*]*)(\([^\s\\;\*}\]"\)\(\$,\-\+\*<>]*\))?)'
  variable-object:
    patterns:
      - begin: '(?<=^|[\[{;])(?!\s*$|[

          \]};])\s*((\$)([^\s

          \]}]+))(?:(?!\s*$|\s*[

          }\];])\s*([^\s

          \]};]*))?'
        beginCaptures:
          "1":
            captures:
              "1":
                patterns:
                  - include: "#variable-non-substituting"
            match: (?<={)\s*([^\s]*)\s*(?=})
          "2":
            name: support.type
          "3":
            name: meta.class
            patterns:
              - include: "#namespace-separator"
          "4":
            patterns:
              - include: "#line-escape"
              - match: (destroy|new|create)
                name: keyword.oo.special.tcl
              - include: "#namespace-name"
        end: '(?=(?<!\\)(?:$|[

          \];\[{}]))'
        patterns:
          - include: "#line-escape"
          - include: "#proc-call-args"
scopeName: source.tcl
